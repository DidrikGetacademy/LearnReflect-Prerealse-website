{"ast":null,"code":"import React,{useState}from'react';import{PayPalScriptProvider,PayPalButtons}from\"@paypal/react-paypal-js\";import axios from\"axios\";import{jsx as _jsx,jsxs as _jsxs,Fragment as _Fragment}from\"react/jsx-runtime\";export default function PaymentDetails(){const[paid,setPaidFor]=useState(false);const[error,setError]=useState(false);// Fixed amount for the item\nconst amount=20;// Fixed price in USD\n// Create order function\nconst CreateOrder=async()=>{try{// Make a POST request to the backend to create the PayPal order\nconst response=await axios.post('https://learnreflects.com/Server/Payment.php',{amount:amount,// Use the fixed amount\ncurrency:\"USD\"});console.log(response.data);// Log the response data\nreturn response.data.id;// Return the order ID from the backend (use the correct key for orderID)\n}catch(error){console.error('Error creating PayPal order:',error);setError(true);// Set error state if there's an issue\n}};// Handle order approval (when payment is completed)\nconst handleApprove=async(data,actions)=>{try{// Capture the order using the actions object\nconst orderData=await actions.order.capture();console.log(\"Order successfully captured! Order Data: \",orderData);setPaidFor(true);// Set payment success state\n}catch(error){console.error('Error capturing order:',error);setError(true);// Set error state if there's an issue\n}};// Handle errors in payment process\nconst handleError=err=>{console.log('Error: ',err);setError(true);// Set error state\n};return/*#__PURE__*/_jsx(\"div\",{children:/*#__PURE__*/_jsx(PayPalScriptProvider,{options:{\"client-id\":\"AQTrkWTmd3pfVlhl_bNhKbCyjeVh0Yf-O-fsWLPw0sRgrzWwdPOCx0o_YFKSmoFfxkdecE0ySjfxoWPt\"},children:/*#__PURE__*/_jsxs(\"div\",{className:\"payment-details\",id:\"paypal-button-container\",children:[paid?/*#__PURE__*/_jsx(\"h2\",{children:\"Payment Successful!\"}):/*#__PURE__*/_jsxs(_Fragment,{children:[/*#__PURE__*/_jsxs(\"h3\",{children:[\"Price: $\",amount]}),\" \",/*#__PURE__*/_jsx(PayPalButtons,{createOrder:async(data,actions)=>{const orderID=await CreateOrder();// Call without passing amount\nreturn orderID;// Return the created order ID\n},onApprove:handleApprove// Approve the order\n,onError:handleError// Handle any errors\n})]}),error&&/*#__PURE__*/_jsx(\"p\",{children:\"An error occurred during the payment process. Please try again.\"})]})})});}","map":{"version":3,"names":["React","useState","PayPalScriptProvider","PayPalButtons","axios","jsx","_jsx","jsxs","_jsxs","Fragment","_Fragment","PaymentDetails","paid","setPaidFor","error","setError","amount","CreateOrder","response","post","currency","console","log","data","id","handleApprove","actions","orderData","order","capture","handleError","err","children","options","className","createOrder","orderID","onApprove","onError"],"sources":["C:/Users/didri/Desktop/PreRealse/LearnReflect-Prerealse-website/src/PaymentDetails.js"],"sourcesContent":["import React, { useState } from 'react';\r\nimport { PayPalScriptProvider, PayPalButtons } from \"@paypal/react-paypal-js\";\r\nimport axios from \"axios\";\r\n\r\nexport default function PaymentDetails() {\r\n    const [paid, setPaidFor] = useState(false);\r\n    const [error, setError] = useState(false);\r\n    \r\n    // Fixed amount for the item\r\n    const amount = 20; // Fixed price in USD\r\n\r\n    // Create order function\r\n    const CreateOrder = async () => {\r\n        try {\r\n            // Make a POST request to the backend to create the PayPal order\r\n            const response = await axios.post('https://learnreflects.com/Server/Payment.php', {\r\n                amount: amount, // Use the fixed amount\r\n                currency: \"USD\"\r\n            });\r\n            \r\n            console.log(response.data); // Log the response data\r\n            return response.data.id; // Return the order ID from the backend (use the correct key for orderID)\r\n        } catch (error) {\r\n            console.error('Error creating PayPal order:', error);\r\n            setError(true); // Set error state if there's an issue\r\n        }\r\n    };\r\n\r\n    // Handle order approval (when payment is completed)\r\n    const handleApprove = async (data, actions) => {\r\n        try {\r\n            // Capture the order using the actions object\r\n            const orderData = await actions.order.capture();\r\n            console.log(\"Order successfully captured! Order Data: \", orderData);\r\n            setPaidFor(true); // Set payment success state\r\n        } catch (error) {\r\n            console.error('Error capturing order:', error);\r\n            setError(true); // Set error state if there's an issue\r\n        }\r\n    };\r\n\r\n    // Handle errors in payment process\r\n    const handleError = (err) => {\r\n        console.log('Error: ', err);\r\n        setError(true); // Set error state\r\n    };\r\n\r\n    return (\r\n        <div>\r\n            <PayPalScriptProvider options={{ \"client-id\": \"AQTrkWTmd3pfVlhl_bNhKbCyjeVh0Yf-O-fsWLPw0sRgrzWwdPOCx0o_YFKSmoFfxkdecE0ySjfxoWPt\" }}>\r\n                <div className='payment-details' id=\"paypal-button-container\">\r\n                    {paid ? (\r\n                        <h2>Payment Successful!</h2>\r\n                    ) : (\r\n                        <>\r\n                            <h3>Price: ${amount}</h3> {/* Display fixed price */}\r\n                            <PayPalButtons\r\n                                createOrder={async (data, actions) => {\r\n                                    const orderID = await CreateOrder(); // Call without passing amount\r\n                                    return orderID; // Return the created order ID\r\n                                }}\r\n                                onApprove={handleApprove} // Approve the order\r\n                                onError={handleError} // Handle any errors\r\n                            />\r\n                        </>\r\n                    )}\r\n                    {error && <p>An error occurred during the payment process. Please try again.</p>}\r\n                </div>\r\n            </PayPalScriptProvider>\r\n        </div>\r\n    );\r\n}\r\n"],"mappings":"AAAA,MAAO,CAAAA,KAAK,EAAIC,QAAQ,KAAQ,OAAO,CACvC,OAASC,oBAAoB,CAAEC,aAAa,KAAQ,yBAAyB,CAC7E,MAAO,CAAAC,KAAK,KAAM,OAAO,CAAC,OAAAC,GAAA,IAAAC,IAAA,CAAAC,IAAA,IAAAC,KAAA,CAAAC,QAAA,IAAAC,SAAA,yBAE1B,cAAe,SAAS,CAAAC,cAAcA,CAAA,CAAG,CACrC,KAAM,CAACC,IAAI,CAAEC,UAAU,CAAC,CAAGZ,QAAQ,CAAC,KAAK,CAAC,CAC1C,KAAM,CAACa,KAAK,CAAEC,QAAQ,CAAC,CAAGd,QAAQ,CAAC,KAAK,CAAC,CAEzC;AACA,KAAM,CAAAe,MAAM,CAAG,EAAE,CAAE;AAEnB;AACA,KAAM,CAAAC,WAAW,CAAG,KAAAA,CAAA,GAAY,CAC5B,GAAI,CACA;AACA,KAAM,CAAAC,QAAQ,CAAG,KAAM,CAAAd,KAAK,CAACe,IAAI,CAAC,8CAA8C,CAAE,CAC9EH,MAAM,CAAEA,MAAM,CAAE;AAChBI,QAAQ,CAAE,KACd,CAAC,CAAC,CAEFC,OAAO,CAACC,GAAG,CAACJ,QAAQ,CAACK,IAAI,CAAC,CAAE;AAC5B,MAAO,CAAAL,QAAQ,CAACK,IAAI,CAACC,EAAE,CAAE;AAC7B,CAAE,MAAOV,KAAK,CAAE,CACZO,OAAO,CAACP,KAAK,CAAC,8BAA8B,CAAEA,KAAK,CAAC,CACpDC,QAAQ,CAAC,IAAI,CAAC,CAAE;AACpB,CACJ,CAAC,CAED;AACA,KAAM,CAAAU,aAAa,CAAG,KAAAA,CAAOF,IAAI,CAAEG,OAAO,GAAK,CAC3C,GAAI,CACA;AACA,KAAM,CAAAC,SAAS,CAAG,KAAM,CAAAD,OAAO,CAACE,KAAK,CAACC,OAAO,CAAC,CAAC,CAC/CR,OAAO,CAACC,GAAG,CAAC,2CAA2C,CAAEK,SAAS,CAAC,CACnEd,UAAU,CAAC,IAAI,CAAC,CAAE;AACtB,CAAE,MAAOC,KAAK,CAAE,CACZO,OAAO,CAACP,KAAK,CAAC,wBAAwB,CAAEA,KAAK,CAAC,CAC9CC,QAAQ,CAAC,IAAI,CAAC,CAAE;AACpB,CACJ,CAAC,CAED;AACA,KAAM,CAAAe,WAAW,CAAIC,GAAG,EAAK,CACzBV,OAAO,CAACC,GAAG,CAAC,SAAS,CAAES,GAAG,CAAC,CAC3BhB,QAAQ,CAAC,IAAI,CAAC,CAAE;AACpB,CAAC,CAED,mBACIT,IAAA,QAAA0B,QAAA,cACI1B,IAAA,CAACJ,oBAAoB,EAAC+B,OAAO,CAAE,CAAE,WAAW,CAAE,kFAAmF,CAAE,CAAAD,QAAA,cAC/HxB,KAAA,QAAK0B,SAAS,CAAC,iBAAiB,CAACV,EAAE,CAAC,yBAAyB,CAAAQ,QAAA,EACxDpB,IAAI,cACDN,IAAA,OAAA0B,QAAA,CAAI,qBAAmB,CAAI,CAAC,cAE5BxB,KAAA,CAAAE,SAAA,EAAAsB,QAAA,eACIxB,KAAA,OAAAwB,QAAA,EAAI,UAAQ,CAAChB,MAAM,EAAK,CAAC,IAAC,cAC1BV,IAAA,CAACH,aAAa,EACVgC,WAAW,CAAE,KAAAA,CAAOZ,IAAI,CAAEG,OAAO,GAAK,CAClC,KAAM,CAAAU,OAAO,CAAG,KAAM,CAAAnB,WAAW,CAAC,CAAC,CAAE;AACrC,MAAO,CAAAmB,OAAO,CAAE;AACpB,CAAE,CACFC,SAAS,CAAEZ,aAAe;AAAA,CAC1Ba,OAAO,CAAER,WAAa;AAAA,CACzB,CAAC,EACJ,CACL,CACAhB,KAAK,eAAIR,IAAA,MAAA0B,QAAA,CAAG,iEAA+D,CAAG,CAAC,EAC/E,CAAC,CACY,CAAC,CACtB,CAAC,CAEd","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}