{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\didri\\\\Desktop\\\\PreRealse\\\\LearnReflect-Prerealse-website\\\\src\\\\PaymentDetails.js\",\n  _s2 = $RefreshSig$();\nimport React, { useState, useEffect } from 'react';\nimport { PayPalScriptProvider, PayPalButtons } from \"@paypal/react-paypal-js\";\nimport axios from \"axios\";\nimport { jsxDEV as _jsxDEV, Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nexport default function PaymentDetails() {\n  _s2();\n  var _s = $RefreshSig$();\n  const [paid, setPaidFor] = useState(false);\n  const [error, setError] = useState(false);\n  const [amount, setAmount] = useState(20); // Allowing custom amount\n\n  const CreateOrder = async (amount, currency = \"USD\") => {\n    _s();\n    try {\n      useEffect(() => {\n        // Make a GET request with amount and currency as query parameters\n        axios.get(`https://learnreflects.com/Server/Payment.php?amount=${amount}&currency=${currency}`).then(response => {\n          console.log(response.data); // Log the full response\n        }).catch(err => console.log(err));\n      }, [amount, currency]); // Dependency array ensures effect runs when amount or currency change\n\n      const data = await response.json();\n      return data.orderID; // Return the order ID from the backend\n    } catch (error) {\n      console.error('Error creating PayPal order:', error);\n      setError(true);\n    }\n  };\n  _s(CreateOrder, \"OD7bBpZva5O2jO+Puf00hKivP7c=\");\n  const handleApprove = async (data, actions) => {\n    try {\n      // Capture the order using the actions object\n      const orderData = await actions.order.capture();\n      console.log(\"Order successfully captured! Order Data: \", orderData);\n      setPaidFor(true);\n    } catch (error) {\n      console.error('Error capturing order:', error);\n      setError(true);\n    }\n  };\n  const handleError = err => {\n    console.log('Error: ', err);\n    setError(true);\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: /*#__PURE__*/_jsxDEV(PayPalScriptProvider, {\n      options: {\n        \"client-id\": \"AQTrkWTmd3pfVlhl_bNhKbCyjeVh0Yf-O-fsWLPw0sRgrzWwdPOCx0o_YFKSmoFfxkdecE0ySjfxoWPt\"\n      },\n      children: /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"payment-details\",\n        id: \"paypal-button-container\",\n        children: [paid ? /*#__PURE__*/_jsxDEV(\"h2\", {\n          children: \"Payment Successful!\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 52,\n          columnNumber: 25\n        }, this) : /*#__PURE__*/_jsxDEV(_Fragment, {\n          children: [/*#__PURE__*/_jsxDEV(\"input\", {\n            type: \"number\",\n            value: amount,\n            onChange: e => setAmount(e.target.value),\n            placeholder: \"Enter Amount\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 55,\n            columnNumber: 29\n          }, this), /*#__PURE__*/_jsxDEV(PayPalButtons, {\n            createOrder: async (data, actions) => {\n              const orderID = await CreateOrder(amount); // Use custom amount\n              return orderID; // Return the created order ID\n            },\n            onApprove: handleApprove,\n            onError: handleError\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 61,\n            columnNumber: 29\n          }, this)]\n        }, void 0, true), error && /*#__PURE__*/_jsxDEV(\"p\", {\n          children: \"An error occurred during the payment process. Please try again.\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 71,\n          columnNumber: 31\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 50,\n        columnNumber: 17\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 49,\n      columnNumber: 13\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 47,\n    columnNumber: 9\n  }, this);\n}\n_s2(PaymentDetails, \"7ZR7OdchYD6YLzR0PpiXwluqDy0=\");\n_c = PaymentDetails;\nvar _c;\n$RefreshReg$(_c, \"PaymentDetails\");","map":{"version":3,"names":["React","useState","useEffect","PayPalScriptProvider","PayPalButtons","axios","jsxDEV","_jsxDEV","Fragment","_Fragment","PaymentDetails","_s2","_s","$RefreshSig$","paid","setPaidFor","error","setError","amount","setAmount","CreateOrder","currency","get","then","response","console","log","data","catch","err","json","orderID","handleApprove","actions","orderData","order","capture","handleError","children","options","className","id","fileName","_jsxFileName","lineNumber","columnNumber","type","value","onChange","e","target","placeholder","createOrder","onApprove","onError","_c","$RefreshReg$"],"sources":["C:/Users/didri/Desktop/PreRealse/LearnReflect-Prerealse-website/src/PaymentDetails.js"],"sourcesContent":["import React, { useState,useEffect } from 'react';\r\nimport { PayPalScriptProvider, PayPalButtons } from \"@paypal/react-paypal-js\";\r\nimport axios from \"axios\";\r\nexport default function PaymentDetails() {\r\n    const [paid, setPaidFor] = useState(false);\r\n    const [error, setError] = useState(false);\r\n    const [amount, setAmount] = useState(20); // Allowing custom amount\r\n\r\n    const CreateOrder = async (amount, currency = \"USD\") => {\r\n        try {\r\n            useEffect(() => {\r\n                // Make a GET request with amount and currency as query parameters\r\n                axios.get(`https://learnreflects.com/Server/Payment.php?amount=${amount}&currency=${currency}`)\r\n                    .then(response => {\r\n                        console.log(response.data); // Log the full response\r\n                    })\r\n                    .catch(err => console.log(err));\r\n            }, [amount, currency]); // Dependency array ensures effect runs when amount or currency change\r\n    \r\n            const data = await response.json();\r\n            return data.orderID; // Return the order ID from the backend\r\n        } catch (error) {\r\n            console.error('Error creating PayPal order:', error);\r\n            setError(true);\r\n        }\r\n    };\r\n    \r\n\r\n    const handleApprove = async (data, actions) => {\r\n        try {\r\n            // Capture the order using the actions object\r\n            const orderData = await actions.order.capture();\r\n            console.log(\"Order successfully captured! Order Data: \", orderData);\r\n            setPaidFor(true);\r\n        } catch (error) {\r\n            console.error('Error capturing order:', error);\r\n            setError(true);\r\n        }\r\n    };\r\n\r\n    const handleError = (err) => {\r\n        console.log('Error: ', err);\r\n        setError(true);\r\n    };\r\n\r\n    return (\r\n        <div>\r\n\r\n            <PayPalScriptProvider options={{ \"client-id\": \"AQTrkWTmd3pfVlhl_bNhKbCyjeVh0Yf-O-fsWLPw0sRgrzWwdPOCx0o_YFKSmoFfxkdecE0ySjfxoWPt\" }}>\r\n                <div className='payment-details' id=\"paypal-button-container\">\r\n                    {paid ? (\r\n                        <h2>Payment Successful!</h2>\r\n                    ) : (\r\n                        <>\r\n                            <input\r\n                                type=\"number\"\r\n                                value={amount}\r\n                                onChange={(e) => setAmount(e.target.value)}\r\n                                placeholder=\"Enter Amount\"\r\n                            />\r\n                            <PayPalButtons\r\n                                createOrder={async (data, actions) => {\r\n                                    const orderID = await CreateOrder(amount); // Use custom amount\r\n                                    return orderID; // Return the created order ID\r\n                                }}\r\n                                onApprove={handleApprove}\r\n                                onError={handleError}\r\n                            />\r\n                        </>\r\n                    )}\r\n                    {error && <p>An error occurred during the payment process. Please try again.</p>}\r\n                </div>\r\n            </PayPalScriptProvider>\r\n        </div>\r\n    );\r\n}\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}