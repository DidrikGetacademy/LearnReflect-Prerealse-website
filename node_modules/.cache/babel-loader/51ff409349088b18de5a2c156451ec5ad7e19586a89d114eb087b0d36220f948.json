{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\didri\\\\Desktop\\\\PreRealse\\\\LearnReflect-Prerealse-website\\\\src\\\\PaymentDetails.js\",\n  _s = $RefreshSig$();\nimport React, { useState } from 'react';\nimport { PayPalScriptProvider, PayPalButtons } from \"@paypal/react-paypal-js\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport default function PaymentDetails() {\n  _s();\n  const [paid, setPaidFor] = useState(false);\n  const [error, setError] = useState(false);\n  const CreateOrder = async () => {\n    try {\n      const response = await fetch('http://your-backend-url/create-paypal-order.php', {\n        method: 'POST',\n        // Ensure this is a string\n        headers: {\n          'Content-Type': 'application/json'\n        }\n      });\n      const data = await response.json();\n      return data.orderID; // returns the PayPal order ID from the PHP server.\n    } catch (error) {\n      console.error('Error creating PayPal order:', error);\n      setError(true);\n    }\n  };\n  const handleApprove = async data => {\n    console.log(\"Order successfully captured! Order ID: \", data.orderID);\n    setPaidFor(true);\n  };\n  const handleError = err => {\n    console.log('Error: ', err);\n    setError(true);\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(\"img\", {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 38,\n      columnNumber: 9\n    }, this), /*#__PURE__*/_jsxDEV(PayPalScriptProvider, {\n      options: {\n        \"client-id\": \"YOUR_CLIENT_ID\"\n      },\n      children: /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"payment-details\",\n        id: \"paypal-button-container\",\n        children: [paid ? /*#__PURE__*/_jsxDEV(\"h2\", {\n          children: \"Payment Successful!\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 42,\n          columnNumber: 21\n        }, this) : /*#__PURE__*/_jsxDEV(PayPalButtons, {\n          createOrder: async (data, actions) => {\n            const orderID = await CreateOrder();\n            return orderID; // Return orderID to PayPal\n          },\n          onApprove: handleApprove,\n          onError: handleError\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 44,\n          columnNumber: 21\n        }, this), error && /*#__PURE__*/_jsxDEV(\"p\", {\n          children: \"An error occurred during the payment process.\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 53,\n          columnNumber: 27\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 40,\n        columnNumber: 13\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 39,\n      columnNumber: 9\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 36,\n    columnNumber: 9\n  }, this);\n}\n_s(PaymentDetails, \"rWgQslQ6NwRCDg8ywWJkcuie7EU=\");\n_c = PaymentDetails;\nvar _c;\n$RefreshReg$(_c, \"PaymentDetails\");","map":{"version":3,"names":["React","useState","PayPalScriptProvider","PayPalButtons","jsxDEV","_jsxDEV","PaymentDetails","_s","paid","setPaidFor","error","setError","CreateOrder","response","fetch","method","headers","data","json","orderID","console","handleApprove","log","handleError","err","children","fileName","_jsxFileName","lineNumber","columnNumber","options","className","id","createOrder","actions","onApprove","onError","_c","$RefreshReg$"],"sources":["C:/Users/didri/Desktop/PreRealse/LearnReflect-Prerealse-website/src/PaymentDetails.js"],"sourcesContent":["import React, { useState } from 'react';\r\nimport { PayPalScriptProvider, PayPalButtons } from \"@paypal/react-paypal-js\";\r\n\r\nexport default function PaymentDetails() {\r\n    const [paid, setPaidFor] = useState(false);\r\n    const [error, setError] = useState(false);\r\n\r\n    const CreateOrder = async () => {\r\n        try {\r\n            const response = await fetch('http://your-backend-url/create-paypal-order.php', {\r\n                method: 'POST', // Ensure this is a string\r\n                headers: {\r\n                    'Content-Type': 'application/json',\r\n                },\r\n            });\r\n\r\n            const data = await response.json();\r\n            return data.orderID; // returns the PayPal order ID from the PHP server.\r\n        } catch (error) {\r\n            console.error('Error creating PayPal order:', error);\r\n            setError(true);\r\n        }\r\n    };\r\n\r\n    const handleApprove = async (data) => {\r\n        console.log(\"Order successfully captured! Order ID: \", data.orderID);\r\n        setPaidFor(true);\r\n    };\r\n\r\n    const handleError = (err) => {\r\n        console.log('Error: ', err);\r\n        setError(true);\r\n    };\r\n\r\n    return (\r\n        <div>\r\n\r\n        <img />\r\n        <PayPalScriptProvider options={{ \"client-id\": \"YOUR_CLIENT_ID\" }}>\r\n            <div className='payment-details' id=\"paypal-button-container\">\r\n                {paid ? (\r\n                    <h2>Payment Successful!</h2>\r\n                ) : (\r\n                    <PayPalButtons\r\n                    createOrder={async (data, actions) => {\r\n                        const orderID = await CreateOrder();\r\n                        return orderID; // Return orderID to PayPal\r\n                    }}\r\n                    onApprove={handleApprove}\r\n                    onError={handleError}\r\n                    />\r\n                )}\r\n                {error && <p>An error occurred during the payment process.</p>}\r\n            </div>\r\n        </PayPalScriptProvider>\r\n                </div>\r\n    );\r\n}\r\n"],"mappings":";;AAAA,OAAOA,KAAK,IAAIC,QAAQ,QAAQ,OAAO;AACvC,SAASC,oBAAoB,EAAEC,aAAa,QAAQ,yBAAyB;AAAC,SAAAC,MAAA,IAAAC,OAAA;AAE9E,eAAe,SAASC,cAAcA,CAAA,EAAG;EAAAC,EAAA;EACrC,MAAM,CAACC,IAAI,EAAEC,UAAU,CAAC,GAAGR,QAAQ,CAAC,KAAK,CAAC;EAC1C,MAAM,CAACS,KAAK,EAAEC,QAAQ,CAAC,GAAGV,QAAQ,CAAC,KAAK,CAAC;EAEzC,MAAMW,WAAW,GAAG,MAAAA,CAAA,KAAY;IAC5B,IAAI;MACA,MAAMC,QAAQ,GAAG,MAAMC,KAAK,CAAC,iDAAiD,EAAE;QAC5EC,MAAM,EAAE,MAAM;QAAE;QAChBC,OAAO,EAAE;UACL,cAAc,EAAE;QACpB;MACJ,CAAC,CAAC;MAEF,MAAMC,IAAI,GAAG,MAAMJ,QAAQ,CAACK,IAAI,CAAC,CAAC;MAClC,OAAOD,IAAI,CAACE,OAAO,CAAC,CAAC;IACzB,CAAC,CAAC,OAAOT,KAAK,EAAE;MACZU,OAAO,CAACV,KAAK,CAAC,8BAA8B,EAAEA,KAAK,CAAC;MACpDC,QAAQ,CAAC,IAAI,CAAC;IAClB;EACJ,CAAC;EAED,MAAMU,aAAa,GAAG,MAAOJ,IAAI,IAAK;IAClCG,OAAO,CAACE,GAAG,CAAC,yCAAyC,EAAEL,IAAI,CAACE,OAAO,CAAC;IACpEV,UAAU,CAAC,IAAI,CAAC;EACpB,CAAC;EAED,MAAMc,WAAW,GAAIC,GAAG,IAAK;IACzBJ,OAAO,CAACE,GAAG,CAAC,SAAS,EAAEE,GAAG,CAAC;IAC3Bb,QAAQ,CAAC,IAAI,CAAC;EAClB,CAAC;EAED,oBACIN,OAAA;IAAAoB,QAAA,gBAEApB,OAAA;MAAAqB,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAM,CAAC,eACPxB,OAAA,CAACH,oBAAoB;MAAC4B,OAAO,EAAE;QAAE,WAAW,EAAE;MAAiB,CAAE;MAAAL,QAAA,eAC7DpB,OAAA;QAAK0B,SAAS,EAAC,iBAAiB;QAACC,EAAE,EAAC,yBAAyB;QAAAP,QAAA,GACxDjB,IAAI,gBACDH,OAAA;UAAAoB,QAAA,EAAI;QAAmB;UAAAC,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OAAI,CAAC,gBAE5BxB,OAAA,CAACF,aAAa;UACd8B,WAAW,EAAE,MAAAA,CAAOhB,IAAI,EAAEiB,OAAO,KAAK;YAClC,MAAMf,OAAO,GAAG,MAAMP,WAAW,CAAC,CAAC;YACnC,OAAOO,OAAO,CAAC,CAAC;UACpB,CAAE;UACFgB,SAAS,EAAEd,aAAc;UACzBe,OAAO,EAAEb;QAAY;UAAAG,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OACpB,CACJ,EACAnB,KAAK,iBAAIL,OAAA;UAAAoB,QAAA,EAAG;QAA6C;UAAAC,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OAAG,CAAC;MAAA;QAAAH,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAC7D;IAAC;MAAAH,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OACY,CAAC;EAAA;IAAAH,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OACV,CAAC;AAEtB;AAACtB,EAAA,CAtDuBD,cAAc;AAAA+B,EAAA,GAAd/B,cAAc;AAAA,IAAA+B,EAAA;AAAAC,YAAA,CAAAD,EAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}